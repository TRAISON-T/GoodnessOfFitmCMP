% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/goodness_of_fit.R
\name{S_objective}
\alias{S_objective}
\title{Objective Function for Estimation (Internal Helper)}
\usage{
S_objective(par, x)
}
\arguments{
\item{par}{A numeric vector of two elements: \code{par[1]} is \eqn{\mu} and \code{par[2]} is \eqn{\phi}.}

\item{x}{A numeric vector of observed sample data.}
}
\value{
A numeric value representing the objective function value. Returns 0 if parameters lead to invalid calculations
(e.g., \eqn{\mu \le 0} or issues with the adjustment term, as per the original code's logic).
}
\description{
This internal helper function defines the objective function \eqn{S(\mu,\phi)}
that is minimized to estimate the mCMP parameters \eqn{\mu} and \eqn{\phi}.
The estimation method used in the package is based on minimizing the probability distance (PD)
between the empirical probabilities and the probabilities derived from Stein's characterization.
The objective function is given by:
\deqn{ S(\mu,\phi) = \sum_{j = 0}^{r} {\left( {p_n(j) - \hat{\rho}_X(j)} \right)} ^2 }
where \eqn{p_n(j)} is the empirical probability of observing value \eqn{j} in the sample,
and \eqn{\hat{\rho}_X(j)} is the estimated Stein-based probability for \eqn{j}
(see \code{\link{estimate_rho_mCMP}}). This approach is computationally efficient as
\eqn{\hat{\rho}_X(j)} does not involve the complex normalizing constant.
}
\examples{
# Simulate some mCMP data
set.seed(789)
sample_data <- simulate_mcmp_sample(n = 50, mu = 4, phi = -0.1)

# Evaluate the objective function for some parameter guesses
# A guess close to the true parameters should yield a smaller value
S_val1 <- S_objective(par = c(mu = 4, phi = -0.1), x = sample_data)
cat("S_objective for (mu=4, phi=-0.1):", S_val1, "\n")

# A guess further from the true parameters should yield a larger value
S_val2 <- S_objective(par = c(mu = 4.5, phi = 0), x = sample_data)
cat("S_objective for (mu=4.5, phi=0):", S_val2, "\n")
}

[{"path":"https://traison-t.github.io/GoodnessOfFitmCMP/articles/GoodnessOfFitmCMP-introduction.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Introduction to GoodnessOfFitmCMP","text":"Conway-Maxwell Poisson (COM-Poisson) distribution flexible generalization Poisson distribution can model -dispersed, equi-dispersed, -dispersed count data. vignette demonstrates use GoodnessOfFitmCMP package test whether count data follows mean-parametrized COM-Poisson (mCMP) distribution.","code":""},{"path":"https://traison-t.github.io/GoodnessOfFitmCMP/articles/GoodnessOfFitmCMP-introduction.html","id":"the-com-poisson-distribution","dir":"Articles","previous_headings":"","what":"The COM-Poisson Distribution","title":"Introduction to GoodnessOfFitmCMP","text":"mCMP distribution probability mass function: $$P(X = x) = {\\left({\\mu + \\frac{{e^\\phi - 1}}{{2e^\\phi}}}\\right)^{xe^\\phi}}\\frac{{(x!)^{-e^\\phi}}}{Z(\\mu ,\\phi)},     \\quad x = 0,1,2,\\ldots,     \\begin{array}{*{20}{c}}        {0 < \\mu < +\\infty,}  \\\\        {-\\infty < \\phi < +\\infty,}     \\end{array}$$ Z(μ,ϕ)Z(\\mu, \\phi) normalizing constant. mean-parametrized version uses parameters μ\\mu (mean) ϕ\\phi (dispersion). ## Basic Example","code":"# Example count data data <- c(2, 3, 1, 4, 2, 3, 2, 1, 3, 2, 4, 1, 3, 2, 5, 1, 2, 3, 4, 2)  # Perform goodness-of-fit test (using small B for example speed) result <- goodness_of_fit_mCMP(data, B = 100, verbose = FALSE)  # Print result print(result) #> $estimated_mu #> [1] 2.543234 #>  #> $estimated_phi #> [1] 0.7916077 #>  #> $p_value #>     CV     AD chi_sq   CV_M   AD_M     PD  #>   0.80   0.95   0.88   0.76   0.73   0.60  #>  #> $obs_stats #>         CV         AD     chi_sq       CV_M       AD_M         PD  #> 0.01014678 0.06138230 0.76667691 0.02574311 0.27330297 0.02165909"},{"path":"https://traison-t.github.io/GoodnessOfFitmCMP/articles/GoodnessOfFitmCMP-introduction.html","id":"understanding-the-output","dir":"Articles","previous_headings":"","what":"Understanding the Output","title":"Introduction to GoodnessOfFitmCMP","text":"","code":"# Check the structure of the result str(result) #> List of 4 #>  $ estimated_mu : num 2.54 #>  $ estimated_phi: num 0.792 #>  $ p_value      : Named num [1:6] 0.8 0.95 0.88 0.76 0.73 0.6 #>   ..- attr(*, \"names\")= chr [1:6] \"CV\" \"AD\" \"chi_sq\" \"CV_M\" ... #>  $ obs_stats    : Named num [1:6] 0.0101 0.0614 0.7667 0.0257 0.2733 ... #>   ..- attr(*, \"names\")= chr [1:6] \"CV\" \"AD\" \"chi_sq\" \"CV_M\" ...  # Print class and names if it's a list if (is.list(result)) {   cat(\"Result components:\", paste(names(result), collapse = \", \"), \"\\n\") } #> Result components: estimated_mu, estimated_phi, p_value, obs_stats"},{"path":"https://traison-t.github.io/GoodnessOfFitmCMP/articles/GoodnessOfFitmCMP-introduction.html","id":"multiple-examples","dir":"Articles","previous_headings":"","what":"Multiple Examples","title":"Introduction to GoodnessOfFitmCMP","text":"","code":"# Example 1: Equi-dispersed data (Poisson-like) set.seed(123) poisson_data <- rpois(30, lambda = 5) result1 <- goodness_of_fit_mCMP(poisson_data, B = 100, verbose = FALSE)  # Example 2: Under-dispersed data underdispersed_data <- c(rep(4, 10), rep(5, 15), rep(6, 8)) result2 <- goodness_of_fit_mCMP(underdispersed_data, B = 100, verbose = FALSE)  # Example 3: Over-dispersed data   overdispersed_data <- c(rep(1, 4), rep(2, 2), rep(3, 5), rep(4, 4), rep(5, 3),6,7,8,9,11,11) result3 <- goodness_of_fit_mCMP(overdispersed_data, B = 100, verbose = FALSE)  # Compare results cat(\"Poisson-like data result:\\n\") #> Poisson-like data result: print(result1) #> $estimated_mu #> [1] 5.67535 #>  #> $estimated_phi #> [1] 0.01159577 #>  #> $p_value #>     CV     AD chi_sq   CV_M   AD_M     PD  #>   0.63   0.70   0.60   0.75   0.86   0.53  #>  #> $obs_stats #>         CV         AD     chi_sq       CV_M       AD_M         PD  #> 0.03375683 0.21556334 8.12202180 0.03759512 0.27208816 0.02466640  cat(\"\\nUnder-dispersed data result:\\n\")  #>  #> Under-dispersed data result: print(result2) #> $estimated_mu #> [1] 5.415733 #>  #> $estimated_phi #> [1] 3.652256 #>  #> $p_value #>     CV     AD chi_sq   CV_M   AD_M     PD  #>   0.97   0.26   0.02   0.69   0.67   0.98  #>  #> $obs_stats #>           CV           AD       chi_sq         CV_M         AD_M           PD  #> 2.403702e-01 4.063318e+00 2.784106e+03 2.112583e+00 9.034292e+00 9.182748e-02  cat(\"\\nOver-dispersed data result:\\n\") #>  #> Over-dispersed data result: print(result3) #> $estimated_mu #> [1] 4.236294 #>  #> $estimated_phi #> [1] -0.8004528 #>  #> $p_value #>     CV     AD chi_sq   CV_M   AD_M     PD  #>   0.62   0.47   0.31   0.49   0.37   0.45  #>  #> $obs_stats #>          CV          AD      chi_sq        CV_M        AD_M          PD  #>  0.03326826  0.30403726 14.53617530  0.05690041  0.54935554  0.02944942"},{"path":"https://traison-t.github.io/GoodnessOfFitmCMP/articles/GoodnessOfFitmCMP-introduction.html","id":"basic-visualization","dir":"Articles","previous_headings":"","what":"Basic Visualization","title":"Introduction to GoodnessOfFitmCMP","text":"","code":"# Simple histogram for the data par(mfrow = c(1, 3))  hist(poisson_data, main = \"Poisson-like Data\",       xlab = \"Count\", ylab = \"Frequency\", col = \"lightblue\", breaks = 6)  hist(underdispersed_data, main = \"Under-dispersed Data\",      xlab = \"Count\", ylab = \"Frequency\", col = \"lightgreen\", breaks = 6)  hist(overdispersed_data, main = \"Over-dispersed Data\",      xlab = \"Count\", ylab = \"Frequency\", col = \"lightcoral\", breaks = 8) par(mfrow = c(1, 1))  # Reset plot layout"},{"path":"https://traison-t.github.io/GoodnessOfFitmCMP/articles/GoodnessOfFitmCMP-introduction.html","id":"parameter-interpretation","dir":"Articles","previous_headings":"","what":"Parameter Interpretation","title":"Introduction to GoodnessOfFitmCMP","text":"COM-Poisson distribution two key parameters: μ (mu): Mean parameter φ = 1: Equi-dispersed (similar Poisson) φ > 1: -dispersed (variance < mean) φ < 1: -dispersed (variance > mean)","code":""},{"path":"https://traison-t.github.io/GoodnessOfFitmCMP/articles/GoodnessOfFitmCMP-introduction.html","id":"test-statistics","dir":"Articles","previous_headings":"","what":"Test Statistics","title":"Introduction to GoodnessOfFitmCMP","text":"package provides several test statistics: Modified Cramér-von Mises (CV_M): Based Stein’s characterization Modified Anderson-Darling (AD_M): Based Stein’s characterization Probability Distance (PD): Based Stein’s characterization Standard tests: Traditional Cramér-von Mises (CV), Anderson-Darling (AD), Chi-square","code":""},{"path":"https://traison-t.github.io/GoodnessOfFitmCMP/articles/GoodnessOfFitmCMP-introduction.html","id":"recommendations","dir":"Articles","previous_headings":"","what":"Recommendations","title":"Introduction to GoodnessOfFitmCMP","text":"Use B = 1000 higher final analysis Use smaller B values (100-500) exploratory analysis Set verbose = TRUE monitor bootstrap progress Consider computational time vs. accuracy tradeoff choosing B","code":""},{"path":"https://traison-t.github.io/GoodnessOfFitmCMP/articles/GoodnessOfFitmCMP-introduction.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Introduction to GoodnessOfFitmCMP","text":"package particularly useful count data may follow standard Poisson distribution, especially dealing - -dispersed observations.","code":""},{"path":"https://traison-t.github.io/GoodnessOfFitmCMP/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Traison T. Maintainer.","code":""},{"path":"https://traison-t.github.io/GoodnessOfFitmCMP/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"T T (2025). GoodnessOfFitmCMP: Goodness--Fit Tests mean reparametrized COM-Poisson Distribution. R package version 0.1.0, https://traison-t.github.io/GoodnessOfFitmCMP.","code":"@Manual{,   title = {GoodnessOfFitmCMP: Goodness-of-Fit Tests for the mean reparametrized COM-Poisson Distribution},   author = {Traison T},   year = {2025},   note = {R package version 0.1.0},   url = {https://traison-t.github.io/GoodnessOfFitmCMP}, }"},{"path":"https://traison-t.github.io/GoodnessOfFitmCMP/index.html","id":"goodnessoffitmcmp","dir":"","previous_headings":"","what":"Goodness-of-Fit Tests for the mean reparametrized COM-Poisson Distribution","title":"Goodness-of-Fit Tests for the mean reparametrized COM-Poisson Distribution","text":"GoodnessOfFitmCMP R package provides goodness--fit tests Conway-Maxwell Poisson (COM-Poisson) distribution, specifically mean-reparametrized form (mCMP). package implements novel test statistics based Stein’s characterization, offers computationally efficient way handle normalizing constant inherent COM-Poisson probability mass function.","code":""},{"path":"https://traison-t.github.io/GoodnessOfFitmCMP/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Goodness-of-Fit Tests for the mean reparametrized COM-Poisson Distribution","text":"COM-Poisson distribution flexible model count data can accommodate equi-dispersion (like Poisson), -dispersion, -dispersion. Traditional goodness--fit tests distribution can computationally challenging. package addresses using Stein’s characterization define modified test statistics: Modified Cramér-von Mises (CV_M) Modified Anderson-Darling (AD_M) Probability Distance (PD) package also includes implementations standard Cramér-von Mises (CV), Anderson-Darling (AD), Chi-square (χ²) tests comparison. P-values tests computed using bootstrap methodology.","code":""},{"path":"https://traison-t.github.io/GoodnessOfFitmCMP/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Goodness-of-Fit Tests for the mean reparametrized COM-Poisson Distribution","text":"can install GoodnessOfFitmCMP package directly GitHub (host ) locally using devtools. First, ensure devtools package installed:","code":"install.packages(\"devtools\")"},{"path":"https://traison-t.github.io/GoodnessOfFitmCMP/index.html","id":"install-from-github","dir":"","previous_headings":"Installation","what":"Install from GitHub","title":"Goodness-of-Fit Tests for the mean reparametrized COM-Poisson Distribution","text":"","code":"devtools::install_github(\"TRAISON-T/GoodnessOfFitmCMP\")"},{"path":"https://traison-t.github.io/GoodnessOfFitmCMP/index.html","id":"key-functions","dir":"","previous_headings":"","what":"Key Functions","title":"Goodness-of-Fit Tests for the mean reparametrized COM-Poisson Distribution","text":"dcmp(x, mu, phi, max_terms, tol): Computes probability mass function (PMF) mCMP distribution. simulate_mcmp_sample(n, mu, phi, max_terms, tol): Generates random samples mCMP distribution using inverse transform sampling. goodness_of_fit_mCMP(x, B, verbose): main function perform goodness--fit tests. estimate_mu_phi(x): Estimates mCMP parameters μ φ. S_objective(par, x): objective function minimized parameter estimation. estimate_rho_mCMP(x, mu, phi, k): Estimates Stein-based probability ρ_X(k). compute_hat_rho_vec(x, mu, phi, r): Computes vectorized Stein-based probabilities. compute_mod_statistics(sample, mu, phi): Calculates various goodness--fit test statistics. detailed documentation function, use ?function_name R (e.g., ?dcmp) installing package.","code":""},{"path":"https://traison-t.github.io/GoodnessOfFitmCMP/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Goodness-of-Fit Tests for the mean reparametrized COM-Poisson Distribution","text":"","code":"# Load the package library(GoodnessOfFitmCMP)  # Example data  x <- c(12, 8, 9, 11, 9, 10, 12, 9, 12, 4, 11, 8, 12, 12, 9, 8, 9, 10, 15, 11, 14, 11, 9, 7, 15, 11, 13, 9, 15, 8, 7, 11)  # Perform the goodness-of-fit test # Use a smaller B for quick examples; B=1000 or more is typically recommended for real analysis. gof_result <- goodness_of_fit_mCMP(x, B = 100, verbose = FALSE) # verbose=FALSE to suppress bootstrap messages  # Print the results print(gof_result)  # Access estimated parameters cat(\"Estimated Mu:\", gof_result$estimated_mu, \"\\n\") cat(\"Estimated Phi:\", gof_result$estimated_phi, \"\\n\")  # Access p-values print(gof_result$p_value)  # Access observed test statistics print(gof_result$obs_stats)"},{"path":"https://traison-t.github.io/GoodnessOfFitmCMP/index.html","id":"theoretical-background","dir":"","previous_headings":"","what":"Theoretical Background","title":"Goodness-of-Fit Tests for the mean reparametrized COM-Poisson Distribution","text":"package based research presented article “Goodness--Fit Tests COM-Poisson Distribution Using Stein’s Characterization” Traison T. V.S. Vaidyanathan. core idea leverage Stein’s characterization represent COM-Poisson PMF form avoids computationally intensive normalizing constant. allows development new, efficient goodness--fit test statistics. parameters estimated minimizing probability distance criterion, significance tests assessed via bootstrap resampling procedure.","code":""},{"path":"https://traison-t.github.io/GoodnessOfFitmCMP/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Goodness-of-Fit Tests for the mean reparametrized COM-Poisson Distribution","text":"package released MIT License. See LICENSE file details.","code":""},{"path":"https://traison-t.github.io/GoodnessOfFitmCMP/reference/compute_hat_rho_vec.html","id":null,"dir":"Reference","previous_headings":"","what":"Vectorized rho_X for k = 0 to r (Internal Helper) — compute_hat_rho_vec","title":"Vectorized rho_X for k = 0 to r (Internal Helper) — compute_hat_rho_vec","text":"internal helper function efficiently computes estimated Stein-based probabilities \\(\\hat{\\rho}_X(k)\\) range \\(k\\) values, specifically 0 maximum observed value \\(r\\) sample. uses estimate_rho_mCMP function \\(k\\). vectorized approach used construct estimated PMF based Stein's characterization.","code":""},{"path":"https://traison-t.github.io/GoodnessOfFitmCMP/reference/compute_hat_rho_vec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vectorized rho_X for k = 0 to r (Internal Helper) — compute_hat_rho_vec","text":"","code":"compute_hat_rho_vec(x, mu, phi, r)"},{"path":"https://traison-t.github.io/GoodnessOfFitmCMP/reference/compute_hat_rho_vec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vectorized rho_X for k = 0 to r (Internal Helper) — compute_hat_rho_vec","text":"x Numeric sample data. mu Numeric location parameter \\(\\mu\\). phi Numeric dispersion parameter \\(\\phi\\). r Maximum value \\(k\\) compute \\(\\hat{\\rho}_X(k)\\) . typically max(x) input sample.","code":""},{"path":"https://traison-t.github.io/GoodnessOfFitmCMP/reference/compute_hat_rho_vec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Vectorized rho_X for k = 0 to r (Internal Helper) — compute_hat_rho_vec","text":"numeric vector \\(\\hat{\\rho}_X(k)\\) values \\(k = 0, \\ldots, r\\).","code":""},{"path":"https://traison-t.github.io/GoodnessOfFitmCMP/reference/compute_hat_rho_vec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Vectorized rho_X for k = 0 to r (Internal Helper) — compute_hat_rho_vec","text":"","code":"# Simulate some mCMP data set.seed(123) sample_data <- simulate_mcmp_sample(n = 20, mu = 3, phi = -0.5)  # Compute rho_X(k) for k from 0 to max(sample_data) max_val <- max(sample_data) hat_rho_values <- compute_hat_rho_vec(x = sample_data, mu = 3, phi = -0.5, r = max_val) names(hat_rho_values) <- 0:max_val # Assign names for clarity print(hat_rho_values) #>          0          1          2          3          4          5          6  #> 0.13744412 0.21909936 0.23840584 0.22834863 0.17424216 0.15846146 0.13909840  #>          7  #> 0.07280531   # These values represent the estimated PMF based on Stein's characterization."},{"path":"https://traison-t.github.io/GoodnessOfFitmCMP/reference/compute_mod_statistics.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Goodness-of-Fit Test Statistics (Internal Helper) — compute_mod_statistics","title":"Compute Goodness-of-Fit Test Statistics (Internal Helper) — compute_mod_statistics","text":"internal helper function calculates various goodness--fit test statistics assess fit mCMP distribution observed sample data. computes traditional modified statistics, detailed article. Traditional Statistics: Cramér-von Mises (CV): Measures squared difference empirical theoretical cumulative distribution functions (CDFs), weighted theoretical PMF. $$ CV = n\\sum_{x = 0}^{r} {{{\\left[ {{F_n}\\left( x \\right) - F\\left( {x;\\mu ,\\phi } \\right)} \\right]}^2}p\\left( {x;\\mu ,\\phi } \\right)} $$ Anderson-Darling (AD): Similar CV, gives weight tails distribution. $$ AD = n\\sum_{x = 0}^{r} {\\frac{{{{\\left[ {{F_n}\\left( x \\right) - F\\left( {x;\\mu ,\\phi } \\right)} \\right]}^2}p\\left( {x;\\mu ,\\phi } \\right)}}{{F\\left( {x;\\mu ,\\phi } \\right)\\left[ {1 - F\\left( {x;\\mu ,\\phi } \\right)} \\right]}}} $$ Chi-square (\\(\\chi^2\\)): Compares observed frequencies (\\(O_x\\)) expected frequencies (\\(E_x\\)) hypothesized distribution. $$ \\chi^2 = \\sum_{x = 0}^{r} \\frac{(O_x - E_x)^2}{E_x} $$ Modified Statistics (using Stein's characterization): statistics proposed article overcome computational challenges due normalizing constant original mCMP PMF. use Stein-based estimated PMF \\(\\hat{\\rho}_X(x)\\) corresponding CDF \\(F_{\\hat{\\rho}_X}(x)\\). Modified Cramér-von Mises (CV_M): $$ C{V_M} = n\\sum_{x = 0}^{r} {{{\\left[ {{F_n}\\left( x \\right) - {F_{{{\\hat \\rho }_x}}}\\left( {x;\\mu ,\\phi } \\right)} \\right]}^2}{{\\hat \\rho }_{X}(x)}} $$ Modified Anderson-Darling (AD_M): $$ AD_M = n\\sum_{x = 0}^{r} {\\frac{{{{\\left[ {{F_n}\\left( x \\right) - {F_{{{\\hat \\rho }_{X}(x)}}}\\left( {x;\\mu ,\\phi } \\right)} \\right]}^2}{{\\hat \\rho }_{X}(x)}}}{{{F_{{{\\hat \\rho }_{X}(x)}}}\\left( {x;\\mu ,\\phi } \\right)\\left[ {1 - {F_{{{\\hat \\rho }_{X}(x)}}}\\left( {x;\\mu ,\\phi } \\right)} \\right]}}} $$ Probability Distance (PD): Measures sum squared differences empirical probabilities Stein-based estimated probabilities. $$ PD = \\sum_{j = 0}^{r} {\\left( {{p_n}(j) - {{\\hat \\rho }_X}\\left( j \\right)} \\right)} ^2$$ \\(n\\) sample size, \\(r\\) maximum observed value, \\(p_n(x)\\) empirical probability, \\(F_n(x)\\) empirical distribution function, \\(p(x;\\mu,\\phi)\\) \\(F(x;\\mu,\\phi)\\) mCMP PMF CDF respectively, \\(\\hat{\\rho}_X(x)\\) \\(F_{\\hat{\\rho}_X}(x)\\) Stein-based estimated PMF corresponding CDF.","code":""},{"path":"https://traison-t.github.io/GoodnessOfFitmCMP/reference/compute_mod_statistics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Goodness-of-Fit Test Statistics (Internal Helper) — compute_mod_statistics","text":"","code":"compute_mod_statistics(sample, mu, phi)"},{"path":"https://traison-t.github.io/GoodnessOfFitmCMP/reference/compute_mod_statistics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Goodness-of-Fit Test Statistics (Internal Helper) — compute_mod_statistics","text":"sample Numeric sample data. mu Numeric location parameter \\(\\mu\\) (typically estimated value). phi Numeric dispersion parameter \\(\\phi\\) (typically estimated value).","code":""},{"path":"https://traison-t.github.io/GoodnessOfFitmCMP/reference/compute_mod_statistics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Goodness-of-Fit Test Statistics (Internal Helper) — compute_mod_statistics","text":"named numeric vector test statistics (CV, AD, chi_sq, CV_M, AD_M, PD).","code":""},{"path":[]},{"path":"https://traison-t.github.io/GoodnessOfFitmCMP/reference/compute_mod_statistics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Goodness-of-Fit Test Statistics (Internal Helper) — compute_mod_statistics","text":"","code":"# Simulate some mCMP data set.seed(456) sample_data <- simulate_mcmp_sample(n = 100, mu = 6, phi = 0.2)  # Estimate parameters for the simulated data (as done in goodness_of_fit_mCMP) estimated_params <- estimate_mu_phi(sample_data) mu_est <- estimated_params[1] phi_est <- estimated_params[2]  # Compute all goodness-of-fit test statistics stats <- compute_mod_statistics(sample = sample_data, mu = mu_est, phi = phi_est) print(stats) #>          CV          AD      chi_sq        CV_M        AD_M          PD  #> 0.015759174 0.116095548 3.965877639 0.026852009 0.194425006 0.002542491"},{"path":"https://traison-t.github.io/GoodnessOfFitmCMP/reference/compute_Z.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Normalizing Constant (Internal) — compute_Z","title":"Compute Normalizing Constant (Internal) — compute_Z","text":"Internal helper function compute normalizing constant Z mCMP distribution.","code":""},{"path":"https://traison-t.github.io/GoodnessOfFitmCMP/reference/compute_Z.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Normalizing Constant (Internal) — compute_Z","text":"","code":"compute_Z(mu, phi, max_terms = 1000, tol = 1e-12)"},{"path":"https://traison-t.github.io/GoodnessOfFitmCMP/reference/compute_Z.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Normalizing Constant (Internal) — compute_Z","text":"mu Numeric location parameter. phi Numeric dispersion parameter. max_terms Maximum terms sum. tol Tolerance series convergence.","code":""},{"path":"https://traison-t.github.io/GoodnessOfFitmCMP/reference/compute_Z.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Normalizing Constant (Internal) — compute_Z","text":"Numeric value Z.","code":""},{"path":"https://traison-t.github.io/GoodnessOfFitmCMP/reference/dcmp.html","id":null,"dir":"Reference","previous_headings":"","what":"The Conway-Maxwell Poisson Probability Mass Function — dcmp","title":"The Conway-Maxwell Poisson Probability Mass Function — dcmp","text":"Computes probability mass function (PMF) Conway-Maxwell Poisson (mCMP) distribution. PMF given : $$ p(X=x;\\mu,\\phi) = \\frac{\\left( \\mu + \\frac{e^\\phi - 1}{2e^\\phi} \\right)^{x e^\\phi}}{(x!)^{e^\\phi} Z(\\mu,\\phi)} $$ \\(x = 0, 1, 2, \\ldots\\), \\(\\mu > 0\\), \\(-\\infty < \\phi < \\infty\\), \\(Z(\\mu,\\phi)\\) normalizing constant. normalizing constant defined : $$ Z(\\mu,\\phi) = \\sum_{j=0}^{\\infty} \\frac{\\left( \\mu + \\frac{e^\\phi - 1}{2e^\\phi} \\right)^{j e^\\phi}}{(j!)^{e^\\phi}} $$ function uses iterative summation \\(Z(\\mu,\\phi)\\) specified number max_terms added terms fall given tol.","code":""},{"path":"https://traison-t.github.io/GoodnessOfFitmCMP/reference/dcmp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Conway-Maxwell Poisson Probability Mass Function — dcmp","text":"","code":"dcmp(x, mu, phi, max_terms = 1000, tol = 1e-12)"},{"path":"https://traison-t.github.io/GoodnessOfFitmCMP/reference/dcmp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Conway-Maxwell Poisson Probability Mass Function — dcmp","text":"x vector non-negative integers. mu numeric value representing location parameter \\(\\mu\\). Must positive. phi numeric value representing dispersion parameter \\(\\phi\\). max_terms integer maximum number terms sum normalizing constant. tol numeric tolerance normalizing constant sum. Summation stops ratio current term total sum falls tolerance.","code":""},{"path":"https://traison-t.github.io/GoodnessOfFitmCMP/reference/dcmp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Conway-Maxwell Poisson Probability Mass Function — dcmp","text":"numeric vector probabilities.","code":""},{"path":"https://traison-t.github.io/GoodnessOfFitmCMP/reference/dcmp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Conway-Maxwell Poisson Probability Mass Function — dcmp","text":"","code":"dcmp(0:5, mu = 2, phi = 0) # Equi-dispersed (Poisson) #> [1] 0.13533528 0.27067057 0.27067057 0.18044704 0.09022352 0.03608941 dcmp(0:5, mu = 2, phi = 1) # Under-dispersed #> [1] 0.028981231 0.284190618 0.423465741 0.209585463 0.047455367 0.005858424 dcmp(0:5, mu = 2, phi = -1) # Over-dispersed #> [1] 0.23081970 0.24228545 0.19707842 0.13809261 0.08704412 0.05054256"},{"path":"https://traison-t.github.io/GoodnessOfFitmCMP/reference/estimate_mu_phi.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate mCMP Parameters by Minimizing S(mu, phi) (Internal Helper) — estimate_mu_phi","title":"Estimate mCMP Parameters by Minimizing S(mu, phi) (Internal Helper) — estimate_mu_phi","text":"internal helper function estimates parameters \\(\\mu\\) \\(\\phi\\) mCMP distribution observed data. achieves numerically minimizing S_objective function, based probability distance criterion. minimization performed using \"L-BFGS-B\" method optim function. Initial guesses \\(\\mu\\) \\(\\phi\\) derived sample mean variance, respectively, provide reasonable starting points optimization algorithm.","code":""},{"path":"https://traison-t.github.io/GoodnessOfFitmCMP/reference/estimate_mu_phi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate mCMP Parameters by Minimizing S(mu, phi) (Internal Helper) — estimate_mu_phi","text":"","code":"estimate_mu_phi(x)"},{"path":"https://traison-t.github.io/GoodnessOfFitmCMP/reference/estimate_mu_phi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate mCMP Parameters by Minimizing S(mu, phi) (Internal Helper) — estimate_mu_phi","text":"x numeric vector observed sample data.","code":""},{"path":"https://traison-t.github.io/GoodnessOfFitmCMP/reference/estimate_mu_phi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate mCMP Parameters by Minimizing S(mu, phi) (Internal Helper) — estimate_mu_phi","text":"numeric vector containing estimated \\(\\mu\\) \\(\\phi\\) values.","code":""},{"path":"https://traison-t.github.io/GoodnessOfFitmCMP/reference/estimate_mu_phi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate mCMP Parameters by Minimizing S(mu, phi) (Internal Helper) — estimate_mu_phi","text":"","code":"# Simulate some mCMP data set.seed(101) sample_data <- simulate_mcmp_sample(n = 70, mu = 7, phi = 0.5)  # Estimate the parameters estimated_params <- estimate_mu_phi(sample_data) cat(\"Estimated mu:\", estimated_params[1], \"\\n\") #> Estimated mu: 7.216284  cat(\"Estimated phi:\", estimated_params[2], \"\\n\") #> Estimated phi: 0.5023312"},{"path":"https://traison-t.github.io/GoodnessOfFitmCMP/reference/estimate_rho_mCMP.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimator of rho_X(k) (Internal Helper) — estimate_rho_mCMP","title":"Estimator of rho_X(k) (Internal Helper) — estimate_rho_mCMP","text":"internal helper function computes estimator \\(\\rho_X(k)\\), represents probability mass function (PMF) mCMP distribution derived using Stein's characterization. Stein's characterization powerful tool allows PMF expressed form avoids computationally challenging normalizing constant present original mCMP PMF. estimator \\(\\hat{\\rho}_X(k)\\) defined : $$ \\hat{\\rho}_X(k) = \\frac{1}{n}\\sum_{=1}^n \\left( 1 - \\left(\\frac{\\mu + \\frac{e^\\phi - 1}{2e^\\phi}}{x_i + 1}\\right)^{e^\\phi} \\right) (x_i \\ge k) $$ \\(x_i\\) observed sample values, \\(n\\) sample size, \\((x_i \\ge k)\\) indicator function, 1 \\(x_i \\ge k\\) 0 otherwise. Law Large Numbers, \\(\\hat{\\rho}_X(k)\\) converges probability \\(\\rho_X(k)\\).","code":""},{"path":"https://traison-t.github.io/GoodnessOfFitmCMP/reference/estimate_rho_mCMP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimator of rho_X(k) (Internal Helper) — estimate_rho_mCMP","text":"","code":"estimate_rho_mCMP(x, mu, phi, k)"},{"path":"https://traison-t.github.io/GoodnessOfFitmCMP/reference/estimate_rho_mCMP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimator of rho_X(k) (Internal Helper) — estimate_rho_mCMP","text":"x numeric vector sample data. mu Numeric location parameter \\(\\mu\\). phi Numeric dispersion parameter \\(\\phi\\). k Integer \\(\\rho_X(k)\\) estimated.","code":""},{"path":"https://traison-t.github.io/GoodnessOfFitmCMP/reference/estimate_rho_mCMP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimator of rho_X(k) (Internal Helper) — estimate_rho_mCMP","text":"Numeric value estimator. Returns 0 parameters lead invalid calculations (e.g., constant non-positive).","code":""},{"path":"https://traison-t.github.io/GoodnessOfFitmCMP/reference/estimate_rho_mCMP.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimator of rho_X(k) (Internal Helper) — estimate_rho_mCMP","text":"","code":"# Simulate some mCMP data set.seed(123) sample_data <- simulate_mcmp_sample(n = 50, mu = 5, phi = 0.1)  # Estimate rho_X(k) for specific k values # Estimate rho_X(0) (probability of observing 0) rho_0 <- estimate_rho_mCMP(x = sample_data, mu = 5, phi = 0.1, k = 0) cat(\"Estimated rho_X(0):\", rho_0, \"\\n\") #> Estimated rho_X(0): 0.06859578   # Estimate rho_X(1) (probability of observing 1) rho_1 <- estimate_rho_mCMP(x = sample_data, mu = 5, phi = 0.1, k = 1) cat(\"Estimated rho_X(1):\", rho_1, \"\\n\") #> Estimated rho_X(1): 0.06859578   # Note: For internal use, this function is typically called by compute_hat_rho_vec."},{"path":"https://traison-t.github.io/GoodnessOfFitmCMP/reference/goodness_of_fit_mCMP.html","id":null,"dir":"Reference","previous_headings":"","what":"Goodness-of-Fit Tests for the mCMP Distribution — goodness_of_fit_mCMP","title":"Goodness-of-Fit Tests for the mCMP Distribution — goodness_of_fit_mCMP","text":"Performs goodness--fit tests mean-reparametrized Conway-Maxwell Poisson (mCMP) distribution using bootstrap methodology. mCMP distribution two-parameter generalization Poisson distribution capable modeling equi-, -, -dispersed count data. Assessing adequacy fit crucial data analysis. function implements proposed modified goodness--fit tests based Stein's characterization: modified Cramér-von Mises (\\(CV_M\\)), modified Anderson-Darling (\\(AD_M\\)), Probability Distance (\\(PD\\)) tests. tests overcome computational complexity associated normalizing constant mCMP probability mass function. comparison, also includes traditional Cramér-von Mises (CV), Anderson-Darling (AD), Chi-square (\\(\\chi^2\\)) tests. p-values test statistics computed using bootstrap procedure. necessary exact distributions test statistics null hypothesis (data comes mCMP distribution) generally difficult obtain. parameters \\(\\mu\\) \\(\\phi\\) mCMP distribution estimated internally minimizing Probability Distance (\\(PD\\)) objective function, \\(S(\\mu,\\phi)\\).","code":""},{"path":"https://traison-t.github.io/GoodnessOfFitmCMP/reference/goodness_of_fit_mCMP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Goodness-of-Fit Tests for the mCMP Distribution — goodness_of_fit_mCMP","text":"","code":"goodness_of_fit_mCMP(x, B = 1000, verbose = TRUE)"},{"path":"https://traison-t.github.io/GoodnessOfFitmCMP/reference/goodness_of_fit_mCMP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Goodness-of-Fit Tests for the mCMP Distribution — goodness_of_fit_mCMP","text":"x numeric vector observed sample data (non-negative integers). B integer number bootstrap runs. Default 1000. larger number provides accurate p-values takes longer compute. verbose logical value indicating whether print progress messages bootstrap iterations.","code":""},{"path":"https://traison-t.github.io/GoodnessOfFitmCMP/reference/goodness_of_fit_mCMP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Goodness-of-Fit Tests for the mCMP Distribution — goodness_of_fit_mCMP","text":"list containing: estimated_mu: estimated location parameter \\(\\mu\\) mCMP distribution. estimated_phi: estimated dispersion parameter \\(\\phi\\) mCMP distribution. p_value: named numeric vector p-values test statistic (CV, AD, chi_sq, CV_M, AD_M, PD). p-values indicate probability observing test statistic extreme extreme observed one, assuming null hypothesis true. obs_stats: named numeric vector observed test statistics calculated input data x.","code":""},{"path":"https://traison-t.github.io/GoodnessOfFitmCMP/reference/goodness_of_fit_mCMP.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Goodness-of-Fit Tests for the mCMP Distribution — goodness_of_fit_mCMP","text":"","code":"# Example data (from the paper's simulation study) x <- c(12, 8, 9, 11, 9, 10, 12, 9, 12, 4, 11, 8, 12, 12, 9, 8, 9, 10,        15, 11, 14, 11, 9, 7, 15, 11, 13, 9, 15, 8, 7, 11)  # Run the goodness-of-fit test. Use a smaller B for quick examples; # B=1000 or more is typically recommended for real analysis. gof_result <- goodness_of_fit_mCMP(x, B = 100, verbose = FALSE) print(gof_result) #> $estimated_mu #> [1] 10.46424 #>  #> $estimated_phi #> [1] 0.6628383 #>  #> $p_value #>     CV     AD chi_sq   CV_M   AD_M     PD  #>   0.36   0.35   0.10   0.61   0.73   0.33  #>  #> $obs_stats #>          CV          AD      chi_sq        CV_M        AD_M          PD  #>  0.04841279  0.34718730 25.43231450  0.05642501  0.35266875  0.03048249  #>"},{"path":"https://traison-t.github.io/GoodnessOfFitmCMP/reference/simulate_mcmp_sample.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate Random Samples from the mCMP Distribution — simulate_mcmp_sample","title":"Simulate Random Samples from the mCMP Distribution — simulate_mcmp_sample","text":"Generates random samples mean-reparametrized Conway-Maxwell Poisson (mCMP) distribution using inverse transform sampling based probability mass function.","code":""},{"path":"https://traison-t.github.io/GoodnessOfFitmCMP/reference/simulate_mcmp_sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate Random Samples from the mCMP Distribution — simulate_mcmp_sample","text":"","code":"simulate_mcmp_sample(n, mu, phi, max_terms = 1000, tol = 1e-12)"},{"path":"https://traison-t.github.io/GoodnessOfFitmCMP/reference/simulate_mcmp_sample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate Random Samples from the mCMP Distribution — simulate_mcmp_sample","text":"n integer specifying number samples generate. mu numeric value location parameter. phi numeric value dispersion parameter. max_terms integer maximum number terms sum normalizing constant dcmp. tol numeric tolerance normalizing constant sum dcmp.","code":""},{"path":"https://traison-t.github.io/GoodnessOfFitmCMP/reference/simulate_mcmp_sample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate Random Samples from the mCMP Distribution — simulate_mcmp_sample","text":"numeric vector random samples.","code":""},{"path":"https://traison-t.github.io/GoodnessOfFitmCMP/reference/simulate_mcmp_sample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate Random Samples from the mCMP Distribution — simulate_mcmp_sample","text":"","code":"# Simulate 10 samples from an equi-dispersed mCMP distribution (similar to Poisson) simulate_mcmp_sample(n = 10, mu = 5, phi = 0) #>  [1] 9 3 4 8 7 5 1 3 4 6  # Simulate 15 samples from an under-dispersed mCMP distribution simulate_mcmp_sample(n = 15, mu = 3, phi = 1) #>  [1] 2 5 4 2 3 2 3 2 5 2 4 4 2 2 3  # Simulate 20 samples from an over-dispersed mCMP distribution simulate_mcmp_sample(n = 20, mu = 7, phi = -0.5) #>  [1]  6  3  4  5  8 13  6 12  3 11  5  5  4  2  3  3  4 10  1  6"},{"path":"https://traison-t.github.io/GoodnessOfFitmCMP/reference/S_objective.html","id":null,"dir":"Reference","previous_headings":"","what":"Objective Function for Estimation (Internal Helper) — S_objective","title":"Objective Function for Estimation (Internal Helper) — S_objective","text":"internal helper function defines objective function \\(S(\\mu,\\phi)\\) minimized estimate mCMP parameters \\(\\mu\\) \\(\\phi\\). estimation method used package based minimizing probability distance (PD) empirical probabilities probabilities derived Stein's characterization. objective function given : $$ S(\\mu,\\phi) = \\sum_{j = 0}^{r} {\\left( {p_n(j) - \\hat{\\rho}_X(j)} \\right)} ^2 $$ \\(p_n(j)\\) empirical probability observing value \\(j\\) sample, \\(\\hat{\\rho}_X(j)\\) estimated Stein-based probability \\(j\\) (see estimate_rho_mCMP). approach computationally efficient \\(\\hat{\\rho}_X(j)\\) involve complex normalizing constant.","code":""},{"path":"https://traison-t.github.io/GoodnessOfFitmCMP/reference/S_objective.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Objective Function for Estimation (Internal Helper) — S_objective","text":"","code":"S_objective(par, x)"},{"path":"https://traison-t.github.io/GoodnessOfFitmCMP/reference/S_objective.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Objective Function for Estimation (Internal Helper) — S_objective","text":"par numeric vector two elements: par[1] \\(\\mu\\) par[2] \\(\\phi\\). x numeric vector observed sample data.","code":""},{"path":"https://traison-t.github.io/GoodnessOfFitmCMP/reference/S_objective.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Objective Function for Estimation (Internal Helper) — S_objective","text":"numeric value representing objective function value. Returns 0 parameters lead invalid calculations (e.g., \\(\\mu \\le 0\\) issues adjustment term, per original code's logic).","code":""},{"path":"https://traison-t.github.io/GoodnessOfFitmCMP/reference/S_objective.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Objective Function for Estimation (Internal Helper) — S_objective","text":"","code":"# Simulate some mCMP data set.seed(789) sample_data <- simulate_mcmp_sample(n = 50, mu = 4, phi = -0.1)  # Evaluate the objective function for some parameter guesses # A guess close to the true parameters should yield a smaller value S_val1 <- S_objective(par = c(mu = 4, phi = -0.1), x = sample_data) cat(\"S_objective for (mu=4, phi=-0.1):\", S_val1, \"\\n\") #> S_objective for (mu=4, phi=-0.1): 0.04233947   # A guess further from the true parameters should yield a larger value S_val2 <- S_objective(par = c(mu = 4.5, phi = 0), x = sample_data) cat(\"S_objective for (mu=4.5, phi=0):\", S_val2, \"\\n\") #> S_objective for (mu=4.5, phi=0): 0.09828928"}]
